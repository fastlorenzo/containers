---
version: "3"

vars:
  LABELS_CONFIG_FILE: "{{.ROOT_DIR}}/.github/labels.yaml"

tasks:
  default:
    cmd: task -l
    silent: true

  append-app-labels:
    desc: Append app labels to the labels config file
    cmds:
      - for: { var: apps }
        cmd: |
          yq -i '. += [{"name": "app/{{.ITEM}}", "color": "0e8a16"}]' {{.LABELS_CONFIG_FILE}}
    vars:
      apps:
        sh: for dir in {{.ROOT_DIR}}/apps/*/; do basename "${dir}"; done
    silent: true

  test:
    desc: |-
      task APP=<app> CHANNEL=<channel> BASE=<true/false> test
    cmds:
      - task: download-goss
      - >-
        cue vet --schema '#Spec' ./apps/{{.APP}}/metadata.yaml metadata.rules.cue
      - >-
        docker buildx build --progress=plain --load
        -t {{.APP}}:{{.CHANNEL}}
        --build-arg CHANNEL={{.CHANNEL}}
        --build-arg VERSION=$(bash ./apps/{{.APP}}/ci/latest.sh "{{.CHANNEL}}")
        {{if eq .MULTIPLATFORM "true"}}
        --platform $(yq eval '.channels[] | select(.name == "{{.CHANNEL}}") | .platforms | join(",")' ./apps/{{.APP}}/metadata.json)
        {{else}}
        --platform "linux/$(uname -m | sed 's/x86_64/amd64/')"
        {{end}}
        -f ./apps/{{.APP}}/Dockerfile .
      - |-
        if [ "$(yq eval '.channels[] | select(.name == "{{.CHANNEL}}") | .tests.type' ./apps/{{.APP}}/metadata.yaml)" == "cli" ]; then
          echo "Testing CLI app"
          export GOSS_ARGS="tail -f /dev/null"
        else
          echo "Testing Web app"
          export GOSS_ARGS=""
        fi
        ./.goss/dgoss run {{.APP}}:{{.CHANNEL}} ${GOSS_ARGS}
    env:
      CONTAINER_RUNTIME: docker
      GOSS_PATH: ./.goss/goss
      GOSS_OPTS: --retry-timeout 60s --sleep 2s --color --format documentation
      GOSS_SLEEP: 2
      GOSS_FILE: ./apps/{{.APP}}/ci/goss.yaml
      GOSS_FILES_STRATEGY: cp
    vars:
      MULTIPLATFORM: '{{ default "false" .MULTIPLATFORM }}'

  download-goss:
    silent: true
    vars:
      GOSS_VERSION: v0.3.21
    cmds:
      - mkdir -p ./.goss
      - curl -fsSL -o ./.goss/goss https://github.com/aelsabbahy/goss/releases/download/{{.GOSS_VERSION}}/goss-linux-amd64
      - chmod +x ./.goss/goss
      - curl -fsSL -o ./.goss/dgoss https://raw.githubusercontent.com/aelsabbahy/goss/{{.GOSS_VERSION}}/extras/dgoss/dgoss
      - chmod +x ./.goss/dgoss
    status:
      - test -f ./.goss/goss
      - test -f ./.goss/dgoss
